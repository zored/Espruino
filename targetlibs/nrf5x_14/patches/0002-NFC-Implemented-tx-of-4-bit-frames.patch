From 6ba7b87d435de70c9dcb2b0b3487597a38cb9aae Mon Sep 17 00:00:00 2001
From: AntiCat <github@anticat.ch>
Date: Fri, 26 May 2017 02:48:53 +0200
Subject: [PATCH 2/7] NFC: Implemented tx of 4 bit frames

ACK/NACK responses used in conjunction with write
commands require support for 4 bit frames w/o CRC
---
 .../components/nfc/t2t_lib/hal_t2t/hal_nfc_t2t.c   | 46 +++++++++++++++++++---
 .../components/nfc/t2t_lib/hal_t2t/hal_nfc_t2t.h   | 10 +++++
 2 files changed, 51 insertions(+), 5 deletions(-)

diff --git a/targetlibs/nrf5x_14/components/nfc/t2t_lib/hal_t2t/hal_nfc_t2t.c b/targetlibs/nrf5x_14/components/nfc/t2t_lib/hal_t2t/hal_nfc_t2t.c
index ca8b5cbf..350577e9 100644
--- a/targetlibs/nrf5x_14/components/nfc/t2t_lib/hal_t2t/hal_nfc_t2t.c
+++ b/targetlibs/nrf5x_14/components/nfc/t2t_lib/hal_t2t/hal_nfc_t2t.c
@@ -612,11 +612,47 @@ ret_code_t hal_nfc_send(const uint8_t * p_data, size_t data_length)
     /* Ignore previous TX END events, SW takes care only for data frames which tranmission is triggered in this function */
     nrf_nfct_event_clear(&NRF_NFCT->EVENTS_TXFRAMEEND);
 
-    NRF_NFCT->PACKETPTR     = (uint32_t) p_data;
-    NRF_NFCT->TXD.AMOUNT    = (data_length << NFCT_TXD_AMOUNT_TXDATABYTES_Pos) &
-                               NFCT_TXD_AMOUNT_TXDATABYTES_Msk;
-    NRF_NFCT->INTENSET      = (NFCT_INTENSET_TXFRAMEEND_Enabled << NFCT_INTENSET_TXFRAMEEND_Pos);
-    NRF_NFCT->TASKS_STARTTX = 1;
+    /* Restore default TX configuration */
+    NRF_NFCT->TXD.FRAMECONFIG =   (NFCT_TXD_FRAMECONFIG_PARITY_Parity << NFCT_TXD_FRAMECONFIG_PARITY_Pos)
+                                | (NFCT_TXD_FRAMECONFIG_DISCARDMODE_DiscardStart << NFCT_TXD_FRAMECONFIG_DISCARDMODE_Pos)
+                                | (NFCT_TXD_FRAMECONFIG_SOF_SoF << NFCT_TXD_FRAMECONFIG_SOF_Pos)
+                                | (NFCT_TXD_FRAMECONFIG_CRCMODETX_CRC16TX << NFCT_TXD_FRAMECONFIG_CRCMODETX_Pos);
+
+    NRF_NFCT->PACKETPTR       = (uint32_t) p_data;
+    NRF_NFCT->TXD.AMOUNT      = (data_length << NFCT_TXD_AMOUNT_TXDATABYTES_Pos) & NFCT_TXD_AMOUNT_TXDATABYTES_Msk;
+    NRF_NFCT->INTENSET        = (NFCT_INTENSET_TXFRAMEEND_Enabled << NFCT_INTENSET_TXFRAMEEND_Pos);
+    NRF_NFCT->TASKS_STARTTX   = 1;
+
+    NRF_LOG_INFO("Send\r\n");
+    return NRF_SUCCESS;
+}
+
+ret_code_t hal_nfc_send_rsp(const uint8_t data, size_t data_length)
+{
+    /* No rx data available, so wait for next frame reception */
+    if (data_length == 0)
+    {
+        NRF_NFCT->TASKS_ENABLERXDATA = 1;
+        return NRF_SUCCESS;
+    }
+
+    /* Data is sent asynchronously using DMA. */
+    static uint8_t buffer[1];
+    buffer[0] = data;
+
+    /* Ignore previous TX END events, SW takes care only for data frames which tranmission is triggered in this function */
+    nrf_nfct_event_clear(&NRF_NFCT->EVENTS_TXFRAMEEND);
+
+    /* Configure peripheral for ACK/NACK */
+    NRF_NFCT->TXD.FRAMECONFIG =   (NFCT_TXD_FRAMECONFIG_PARITY_Parity << NFCT_TXD_FRAMECONFIG_PARITY_Pos)
+                                | (NFCT_TXD_FRAMECONFIG_DISCARDMODE_DiscardEnd << NFCT_TXD_FRAMECONFIG_DISCARDMODE_Pos)
+                                | (NFCT_TXD_FRAMECONFIG_SOF_SoF << NFCT_TXD_FRAMECONFIG_SOF_Pos)
+                                | (NFCT_TXD_FRAMECONFIG_CRCMODETX_NoCRCTX << NFCT_TXD_FRAMECONFIG_CRCMODETX_Pos);
+
+    NRF_NFCT->PACKETPTR       = (uint32_t) buffer;
+    NRF_NFCT->TXD.AMOUNT      = (data_length << NFCT_TXD_AMOUNT_TXDATABITS_Pos) & NFCT_TXD_AMOUNT_TXDATABITS_Msk;
+    NRF_NFCT->INTENSET        = (NFCT_INTENSET_TXFRAMEEND_Enabled << NFCT_INTENSET_TXFRAMEEND_Pos);
+    NRF_NFCT->TASKS_STARTTX   = 1;
 
     NRF_LOG_INFO("Send");
     return NRF_SUCCESS;
diff --git a/targetlibs/nrf5x_14/components/nfc/t2t_lib/hal_t2t/hal_nfc_t2t.h b/targetlibs/nrf5x_14/components/nfc/t2t_lib/hal_t2t/hal_nfc_t2t.h
index 3ee968aa..64ff3172 100644
--- a/targetlibs/nrf5x_14/components/nfc/t2t_lib/hal_t2t/hal_nfc_t2t.h
+++ b/targetlibs/nrf5x_14/components/nfc/t2t_lib/hal_t2t/hal_nfc_t2t.h
@@ -175,6 +175,16 @@ ret_code_t hal_nfc_start(void);
 ret_code_t hal_nfc_send(const uint8_t * p_data, size_t data_length);
 
 
+/** @brief Function for completing a RX and optionaly sending a ACK or NACK to reader.
+  *
+  * @param[in] data         The response to send.
+  * @param[in] data_length  Size of the response in bits 0-7.
+  *
+  * @retval NRF_SUCCESS If the packet was sent. Otherwise, an error code is returned.
+  */
+ret_code_t hal_nfc_send_rsp(const uint8_t p_data, size_t data_length);
+
+
 /** @brief Function for stopping the NFC subsystem.
   *
   * After this function returns, NFC readers will no longer be able to connect
-- 
2.16.0

